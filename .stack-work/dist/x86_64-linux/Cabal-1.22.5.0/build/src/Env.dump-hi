
==================== FINAL INTERFACE ====================
2019-04-16 03:38:49.66851 UTC

interface oprce_DrFrqvqEd8GBFfVkSxZTKM:Env 7103
  interface hash: bbdae98290191b8ce84c528b0c04ad01
  ABI hash: 5bec9d9b71d3f3b3e2a754c35fe74203
  export-list hash: c6786dd068f282b1f5844a3e212cb1f4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Env.inBounds
  Env.neighborTo
  Env.neighborsOf
  Env.Altitude{Env.High Env.Low}
  Env.CardinalDir{Env.East Env.North Env.South Env.West}
  Env.DetailReq{Env.Close Env.Far}
  Env.Direction{Env.deltas}
  Env.Environment
  Env.Footprint
  Env.Hop
  Env.IntercardinalDir{Env.NE Env.NW Env.SE Env.SW}
  Env.Patch{Env.Patch}
  Env.Position{Env.Position}
  Env.XCoord
  Env.YCoord
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map 1800ccac43fd924c376b60eac12f4d04
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set 7116dff3002cb8f8fc1c63ac63f4ea50
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base 681af891dffe392ee938c8b49d69f236
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
7f051353ac4a5a3b2c4061613d753aaf
  $fDirectionCardinalDir :: Env.Direction Env.CardinalDir
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Env.$fDirectionCardinalDir_$cdeltas
                  `cast`
                (Sym (Env.NTCo:Direction[0] <Env.CardinalDir>_N)) -}
93f1423e72c94911c9feeb4e3a001dc4
  $fDirectionCardinalDir1 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir3,
                  Env.$fDirectionCardinalDir2)) -}
779f4e898ad5ae6d35860980c2c72cef
  $fDirectionCardinalDir2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
40f895b21433acf6b376b12485bb4f7c
  $fDirectionCardinalDir3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer -1) -}
6f122ddfd7b675663068d9547643b585
  $fDirectionCardinalDir4 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir5,
                  Env.$fDirectionCardinalDir2)) -}
5d4df4ca94cdef1059a421b6257e92f2
  $fDirectionCardinalDir5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
1c4510dfc26517d556f5991ac0cca4e7
  $fDirectionCardinalDir6 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir2,
                  Env.$fDirectionCardinalDir3)) -}
9d95154a2bf6307530885424fa35d529
  $fDirectionCardinalDir7 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir2,
                  Env.$fDirectionCardinalDir5)) -}
3d9e8622e130b15f664ea53d9599178c
  $fDirectionCardinalDir_$cdeltas :: Env.CardinalDir -> Env.Hop
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Env.CardinalDir ->
                 case ds of wild {
                   Env.North -> Env.$fDirectionCardinalDir7
                   Env.South -> Env.$fDirectionCardinalDir6
                   Env.East -> Env.$fDirectionCardinalDir4
                   Env.West -> Env.$fDirectionCardinalDir1 }) -}
7f051353ac4a5a3b2c4061613d753aaf
  $fDirectionIntercardinalDir :: Env.Direction Env.IntercardinalDir
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Env.$fDirectionIntercardinalDir_$cdeltas
                  `cast`
                (Sym (Env.NTCo:Direction[0] <Env.IntercardinalDir>_N)) -}
0bb0b55bb098adac1389aed9bdc43352
  $fDirectionIntercardinalDir1 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir3,
                  Env.$fDirectionCardinalDir3)) -}
f63cb1e513967a35d421c314805a1312
  $fDirectionIntercardinalDir2 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir3,
                  Env.$fDirectionCardinalDir5)) -}
45fdfb08556c241e0a90526d23ef37d3
  $fDirectionIntercardinalDir3 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir5,
                  Env.$fDirectionCardinalDir3)) -}
27ea80b807c8e80fb722f9717398172b
  $fDirectionIntercardinalDir4 ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Env.$fDirectionCardinalDir5,
                  Env.$fDirectionCardinalDir5)) -}
c19efd116e38d550ecdd2dec4240d0ac
  $fDirectionIntercardinalDir_$cdeltas ::
    Env.IntercardinalDir -> Env.Hop
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Env.IntercardinalDir ->
                 case ds of wild {
                   Env.NE -> Env.$fDirectionIntercardinalDir4
                   Env.SE -> Env.$fDirectionIntercardinalDir3
                   Env.NW -> Env.$fDirectionIntercardinalDir2
                   Env.SW -> Env.$fDirectionIntercardinalDir1 }) -}
0598e7da52a2409522044c401fcee77c
  $fEqAltitude :: GHC.Classes.Eq Env.Altitude
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.Altitude Env.$fEqAltitude_$c== Env.$fEqAltitude_$c/= -}
0598e7da52a2409522044c401fcee77c
  $fEqAltitude_$c/= :: Env.Altitude -> Env.Altitude -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Env.Altitude b :: Env.Altitude ->
                 case a1 of wild {
                   Env.High
                   -> case b of wild1 {
                        Env.High -> GHC.Types.False Env.Low -> GHC.Types.True }
                   Env.Low
                   -> case b of wild1 {
                        Env.High -> GHC.Types.True Env.Low -> GHC.Types.False } }) -}
0598e7da52a2409522044c401fcee77c
  $fEqAltitude_$c== :: Env.Altitude -> Env.Altitude -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Env.Altitude ds1 :: Env.Altitude ->
                 case ds of wild {
                   Env.High
                   -> case ds1 of wild1 {
                        Env.High -> GHC.Types.True Env.Low -> GHC.Types.False }
                   Env.Low
                   -> case ds1 of wild1 {
                        Env.High -> GHC.Types.False Env.Low -> GHC.Types.True } }) -}
798140351eda72b6b26dcc66f57068a2
  $fEqCardinalDir :: GHC.Classes.Eq Env.CardinalDir
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.CardinalDir
                  Env.$fEqCardinalDir_$c==
                  Env.$fEqCardinalDir_$c/= -}
798140351eda72b6b26dcc66f57068a2
  $fEqCardinalDir_$c/= ::
    Env.CardinalDir -> Env.CardinalDir -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a1 :: Env.CardinalDir b :: Env.CardinalDir ->
                 case a1 of wild {
                   Env.North
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.North -> GHC.Types.False }
                   Env.South
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.South -> GHC.Types.False }
                   Env.East
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.East -> GHC.Types.False }
                   Env.West
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.West -> GHC.Types.False } }) -}
798140351eda72b6b26dcc66f57068a2
  $fEqCardinalDir_$c== ::
    Env.CardinalDir -> Env.CardinalDir -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Env.CardinalDir ds1 :: Env.CardinalDir ->
                 case ds of wild {
                   Env.North
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.North -> GHC.Types.True }
                   Env.South
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.South -> GHC.Types.True }
                   Env.East
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.East -> GHC.Types.True }
                   Env.West
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.West -> GHC.Types.True } }) -}
240d397ebcf372029f1762164c40123b
  $fEqIntercardinalDir :: GHC.Classes.Eq Env.IntercardinalDir
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.IntercardinalDir
                  Env.$fEqIntercardinalDir_$c==
                  Env.$fEqIntercardinalDir_$c/= -}
240d397ebcf372029f1762164c40123b
  $fEqIntercardinalDir_$c/= ::
    Env.IntercardinalDir -> Env.IntercardinalDir -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a1 :: Env.IntercardinalDir
                   b :: Env.IntercardinalDir ->
                 case a1 of wild {
                   Env.NE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.NE -> GHC.Types.False }
                   Env.SE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.SE -> GHC.Types.False }
                   Env.NW
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.NW -> GHC.Types.False }
                   Env.SW
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Env.SW -> GHC.Types.False } }) -}
240d397ebcf372029f1762164c40123b
  $fEqIntercardinalDir_$c== ::
    Env.IntercardinalDir -> Env.IntercardinalDir -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Env.IntercardinalDir
                   ds1 :: Env.IntercardinalDir ->
                 case ds of wild {
                   Env.NE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.NE -> GHC.Types.True }
                   Env.SE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.SE -> GHC.Types.True }
                   Env.NW
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.NW -> GHC.Types.True }
                   Env.SW
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Env.SW -> GHC.Types.True } }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fEqPosition :: GHC.Classes.Eq Env.Position
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.Position Env.$fEqPosition_$c== Env.$fEqPosition_$c/= -}
fda968edc0a3e2bcbd99cecfd362a455
  $fEqPosition_$c/= :: Env.Position -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Env.Position b :: Env.Position ->
                 case Env.$fEqPosition_$c== a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fEqPosition_$c== :: Env.Position -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Env.Position w1 :: Env.Position ->
                 case w of ww { Env.Position ww1 ww2 ->
                 case w1 of ww3 { Env.Position ww4 ww5 ->
                 Env.$w$c== ww1 ww2 ww4 ww5 } }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition :: GHC.Classes.Ord Env.Position
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.Position
                  Env.$fEqPosition
                  Env.$fOrdPosition_$ccompare
                  Env.$fOrdPosition_$c<
                  Env.$fOrdPosition_$c<=
                  Env.$fOrdPosition_$c>
                  Env.$fOrdPosition_$c>=
                  Env.$fOrdPosition_$cmax
                  Env.$fOrdPosition_$cmin -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$c< :: Env.Position -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Env.Position y :: Env.Position ->
                 case Env.$fOrdPosition_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$c<= ::
    Env.Position -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Env.Position y :: Env.Position ->
                 case Env.$fOrdPosition_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$c> :: Env.Position -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Env.Position y :: Env.Position ->
                 case Env.$fOrdPosition_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$c>= ::
    Env.Position -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Env.Position y :: Env.Position ->
                 case Env.$fOrdPosition_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$ccompare ::
    Env.Position -> Env.Position -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Env.Position w1 :: Env.Position ->
                 case w of ww { Env.Position ww1 ww2 ->
                 case w1 of ww3 { Env.Position ww4 ww5 ->
                 Env.$w$ccompare ww1 ww2 ww4 ww5 } }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$cmax :: Env.Position -> Env.Position -> Env.Position
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,U)><S(SL),U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Env.Position y :: Env.Position ->
                 case Env.$fOrdPosition_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fOrdPosition_$cmin :: Env.Position -> Env.Position -> Env.Position
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,U)><S(SL),U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Env.Position y :: Env.Position ->
                 case Env.$fOrdPosition_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
0598e7da52a2409522044c401fcee77c
  $fShowAltitude :: GHC.Show.Show Env.Altitude
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.Altitude
                  Env.$fShowAltitude_$cshowsPrec
                  Env.$fShowAltitude_$cshow
                  Env.$fShowAltitude_$cshowList -}
0598e7da52a2409522044c401fcee77c
  $fShowAltitude1 :: Env.Altitude -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Env.Altitude eta :: GHC.Base.String ->
                 case ds of wild {
                   Env.High
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowAltitude3)
                        eta
                   Env.Low
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowAltitude2)
                        eta }) -}
2e1f64bbd98955329cdc3b416f7a2dd6
  $fShowAltitude2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Low"#) -}
f9c75d25aca6e273e9eedd58cb252eea
  $fShowAltitude3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "High"#) -}
0598e7da52a2409522044c401fcee77c
  $fShowAltitude_$cshow :: Env.Altitude -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Env.Altitude ->
                 case x of wild {
                   Env.High -> Env.$fShowAltitude3
                   Env.Low -> Env.$fShowAltitude2 }) -}
0598e7da52a2409522044c401fcee77c
  $fShowAltitude_$cshowList :: [Env.Altitude] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Env.Altitude
                   Env.$fShowAltitude1) -}
0598e7da52a2409522044c401fcee77c
  $fShowAltitude_$cshowsPrec ::
    GHC.Types.Int -> Env.Altitude -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Env.Altitude
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Env.High
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowAltitude3)
                        eta
                   Env.Low
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowAltitude2)
                        eta }) -}
798140351eda72b6b26dcc66f57068a2
  $fShowCardinalDir :: GHC.Show.Show Env.CardinalDir
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.CardinalDir
                  Env.$fShowCardinalDir_$cshowsPrec
                  Env.$fShowCardinalDir_$cshow
                  Env.$fShowCardinalDir_$cshowList -}
d731156ad850c6af8b4d687a459d9ddd
  $fShowCardinalDir1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "West"#) -}
ca3f75d960a66ca965912dc08e224aa7
  $fShowCardinalDir2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "East"#) -}
816452b7f158b503a23dec5bb688f705
  $fShowCardinalDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "South"#) -}
c525189c3ab946433195d6f8ff3d3fed
  $fShowCardinalDir4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "North"#) -}
798140351eda72b6b26dcc66f57068a2
  $fShowCardinalDir_$cshow :: Env.CardinalDir -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Env.CardinalDir ->
                 Env.$fShowCardinalDir_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
798140351eda72b6b26dcc66f57068a2
  $fShowCardinalDir_$cshowList :: [Env.CardinalDir] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Env.CardinalDir
                   Env.$w$cshowsPrec) -}
798140351eda72b6b26dcc66f57068a2
  $fShowCardinalDir_$cshowsPrec ::
    GHC.Types.Int -> Env.CardinalDir -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Env.CardinalDir
                   w2 :: GHC.Base.String ->
                 Env.$w$cshowsPrec w1 w2) -}
41fa8ab29b11a7ddbed19315d304d366
  $fShowDetailReq :: GHC.Show.Show Env.DetailReq
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.DetailReq
                  Env.$fShowDetailReq_$cshowsPrec
                  Env.$fShowDetailReq_$cshow
                  Env.$fShowDetailReq_$cshowList -}
41fa8ab29b11a7ddbed19315d304d366
  $fShowDetailReq1 :: Env.DetailReq -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Env.DetailReq eta :: GHC.Base.String ->
                 case ds of wild {
                   Env.Close
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowDetailReq3)
                        eta
                   Env.Far
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowDetailReq2)
                        eta }) -}
6faf955382c8b1f0db69346ee9c518df
  $fShowDetailReq2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Far"#) -}
a2c486e5e4fa328e367f6052055fa4ae
  $fShowDetailReq3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Close"#) -}
41fa8ab29b11a7ddbed19315d304d366
  $fShowDetailReq_$cshow :: Env.DetailReq -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Env.DetailReq ->
                 case x of wild {
                   Env.Close -> Env.$fShowDetailReq3
                   Env.Far -> Env.$fShowDetailReq2 }) -}
41fa8ab29b11a7ddbed19315d304d366
  $fShowDetailReq_$cshowList :: [Env.DetailReq] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Env.DetailReq
                   Env.$fShowDetailReq1) -}
41fa8ab29b11a7ddbed19315d304d366
  $fShowDetailReq_$cshowsPrec ::
    GHC.Types.Int -> Env.DetailReq -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Env.DetailReq
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Env.Close
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowDetailReq3)
                        eta
                   Env.Far
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Env.$fShowDetailReq2)
                        eta }) -}
240d397ebcf372029f1762164c40123b
  $fShowIntercardinalDir :: GHC.Show.Show Env.IntercardinalDir
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.IntercardinalDir
                  Env.$fShowIntercardinalDir_$cshowsPrec
                  Env.$fShowIntercardinalDir_$cshow
                  Env.$fShowIntercardinalDir_$cshowList -}
e63d3208b2afcc2179b56d7cad8d5765
  $fShowIntercardinalDir1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SW"#) -}
ce9dc7f724cfb7b43d9df7017b547276
  $fShowIntercardinalDir2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NW"#) -}
6474ee9ea1cddce1ca8e1f985dfa0e74
  $fShowIntercardinalDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SE"#) -}
40bd36191d11f5368a845ff009e250d6
  $fShowIntercardinalDir4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NE"#) -}
240d397ebcf372029f1762164c40123b
  $fShowIntercardinalDir_$cshow ::
    Env.IntercardinalDir -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Env.IntercardinalDir ->
                 Env.$fShowIntercardinalDir_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
240d397ebcf372029f1762164c40123b
  $fShowIntercardinalDir_$cshowList ::
    [Env.IntercardinalDir] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Env.IntercardinalDir
                   Env.$w$cshowsPrec1) -}
240d397ebcf372029f1762164c40123b
  $fShowIntercardinalDir_$cshowsPrec ::
    GHC.Types.Int -> Env.IntercardinalDir -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Env.IntercardinalDir
                   w2 :: GHC.Base.String ->
                 Env.$w$cshowsPrec1 w1 w2) -}
61b8cd8a4369899a76572b192b24aaf9
  $fShowPatch :: GHC.Show.Show Env.Patch
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.Patch
                  Env.$fShowPatch_$cshowsPrec
                  Env.$fShowPatch_$cshow
                  Env.$fShowPatch_$cshowList -}
61b8cd8a4369899a76572b192b24aaf9
  $fShowPatch1 :: Env.Patch -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Env.Patch s :: GHC.Base.String[OneShot] ->
                 case x of ww { Env.Patch ww1 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Env.$fShowPatch3
                      (GHC.Base.++
                         @ GHC.Types.Char
                         Env.$fShowPatch2
                         (case ww1 of wild {
                            Env.Close -> Env.$fShowDetailReq3
                            Env.Far -> Env.$fShowDetailReq2 })))
                   s }) -}
efddc5ba5e5a4ec7119bda2b001ef279
  $fShowPatch2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\tScrutiny Needed: "#) -}
fcb76f20b988a91118efad2320de31b3
  $fShowPatch3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Patch:\n"#) -}
61b8cd8a4369899a76572b192b24aaf9
  $fShowPatch_$cshow :: Env.Patch -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Env.Patch ->
                 case w of ww { Env.Patch ww1 -> Env.$w$cshow ww1 }) -}
61b8cd8a4369899a76572b192b24aaf9
  $fShowPatch_$cshowList :: [Env.Patch] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Env.Patch] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Env.Patch Env.$fShowPatch1 ls s) -}
61b8cd8a4369899a76572b192b24aaf9
  $fShowPatch_$cshowsPrec ::
    GHC.Types.Int -> Env.Patch -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Env.Patch s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (Env.$fShowPatch_$cshow x))
                   s) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fShowPosition :: GHC.Show.Show Env.Position
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Env.Position
                  Env.$fShowPosition_$s$dmshowsPrec
                  Env.$fShowPosition_$cshow
                  Env.$fShowPosition_$cshowList -}
fda968edc0a3e2bcbd99cecfd362a455
  $fShowPosition1 ::
    Env.Position -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Env.Position s :: GHC.Base.String[OneShot] ->
                 case x of ww { Env.Position ww1 ww2 ->
                 GHC.Base.++ @ GHC.Types.Char (Env.$w$cshow1 ww1 ww2) s }) -}
2244a6743528b3b14b6219a143f4b024
  $fShowPosition2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
b45e26c0d1460c19be0e998bb22b99c6
  $fShowPosition3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
f372935e4c8b7857cde6bb70e90c571c
  $fShowPosition4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Position: ("#) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fShowPosition_$cshow :: Env.Position -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Env.Position ->
                 case w of ww { Env.Position ww1 ww2 -> Env.$w$cshow1 ww1 ww2 }) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fShowPosition_$cshowList :: [Env.Position] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Env.Position] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Env.Position Env.$fShowPosition1 ls s) -}
fda968edc0a3e2bcbd99cecfd362a455
  $fShowPosition_$s$dmshowsPrec ::
    GHC.Types.Int -> Env.Position -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(U,U)><L,1*U>,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: GHC.Types.Int x :: Env.Position s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Env.$fShowPosition_$cshow x))
                   s) -}
d0d9e55d68c7e5e1da0650c983cc3da4
  $smember_go5 ::
    Env.Position -> Data.Set.Base.Set Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Env.Position w1 :: Data.Set.Base.Set Env.Position ->
                 case w of ww { Env.Position ww1 ww2 -> Env.$wgo5 ww1 ww2 w1 }) -}
76cf3ae7f1eee41fa374f61f7043aa74
  $w$c== ::
    Env.XCoord
    -> Env.YCoord -> Env.XCoord -> Env.YCoord -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: Env.XCoord
                   ww1 :: Env.YCoord
                   ww2 :: Env.XCoord
                   ww3 :: Env.YCoord ->
                 case GHC.Integer.Type.eqInteger# ww ww2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Integer.Type.eqInteger ww1 ww3 } }) -}
574d3694759882b2d8214ebd3e2ea2d8
  $w$ccompare ::
    Env.XCoord
    -> Env.YCoord -> Env.XCoord -> Env.YCoord -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,1*U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: Env.XCoord
                   ww1 :: Env.YCoord
                   ww2 :: Env.XCoord
                   ww3 :: Env.YCoord ->
                 case GHC.Integer.Type.neqInteger# ww ww2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Integer.Type.compareInteger ww1 ww3
                   GHC.Types.True -> GHC.Integer.Type.compareInteger ww ww2 } }) -}
989c6ea5be40f6357b741293116d7283
  $w$cshow :: Env.DetailReq -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: Env.DetailReq ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Env.$fShowPatch3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Env.$fShowPatch2
                      (case ww of wild {
                         Env.Close -> Env.$fShowDetailReq3
                         Env.Far -> Env.$fShowDetailReq2 }))) -}
267a9b25524f29af45f6d9f6619f2119
  $w$cshow1 :: Env.XCoord -> Env.YCoord -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Env.XCoord ww1 :: Env.YCoord ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Env.$fShowPosition4
                   (case GHC.Show.$w$cshowsPrec1
                           0
                           ww
                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         Env.$fShowPosition3
                         (case GHC.Show.$w$cshowsPrec1
                                 0
                                 ww1
                                 (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww6 ww7)
                            Env.$fShowPosition2 })) })) -}
798140351eda72b6b26dcc66f57068a2
  $w$cshowsPrec ::
    Env.CardinalDir -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Env.CardinalDir w1 :: GHC.Base.String ->
                 case w of wild {
                   Env.North -> GHC.Base.++ @ GHC.Types.Char Env.$fShowCardinalDir4 w1
                   Env.South -> GHC.Base.++ @ GHC.Types.Char Env.$fShowCardinalDir3 w1
                   Env.East -> GHC.Base.++ @ GHC.Types.Char Env.$fShowCardinalDir2 w1
                   Env.West
                   -> GHC.Base.++ @ GHC.Types.Char Env.$fShowCardinalDir1 w1 }) -}
240d397ebcf372029f1762164c40123b
  $w$cshowsPrec1 ::
    Env.IntercardinalDir -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Env.IntercardinalDir w1 :: GHC.Base.String ->
                 case w of wild {
                   Env.NE
                   -> GHC.Base.++ @ GHC.Types.Char Env.$fShowIntercardinalDir4 w1
                   Env.SE
                   -> GHC.Base.++ @ GHC.Types.Char Env.$fShowIntercardinalDir3 w1
                   Env.NW
                   -> GHC.Base.++ @ GHC.Types.Char Env.$fShowIntercardinalDir2 w1
                   Env.SW
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Env.$fShowIntercardinalDir1
                        w1 }) -}
1aa5267b9e93050ee626ec4a849bc46d
  $w$sneighborTo ::
    Env.CardinalDir
    -> Env.XCoord -> Env.YCoord -> (# Env.XCoord, Env.YCoord #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Env.CardinalDir
                   ww :: Env.XCoord
                   ww1 :: Env.YCoord ->
                 (# case w of wild {
                      DEFAULT
                      -> GHC.Integer.Type.plusInteger ww Env.$fDirectionCardinalDir2
                      Env.East
                      -> GHC.Integer.Type.plusInteger ww Env.$fDirectionCardinalDir5
                      Env.West
                      -> GHC.Integer.Type.plusInteger ww Env.$fDirectionCardinalDir3 },
                    case w of wild {
                      Env.North
                      -> GHC.Integer.Type.plusInteger ww1 Env.$fDirectionCardinalDir5
                      Env.South
                      -> GHC.Integer.Type.plusInteger ww1 Env.$fDirectionCardinalDir3
                      Env.East
                      -> GHC.Integer.Type.plusInteger ww1 Env.$fDirectionCardinalDir2
                      Env.West
                      -> GHC.Integer.Type.plusInteger
                           ww1
                           Env.$fDirectionCardinalDir2 } #)) -}
26c86f275f1ec57aabdff1d111f6efb2
  $w$sneighborTo1 ::
    Env.IntercardinalDir
    -> Env.XCoord -> Env.YCoord -> (# Env.XCoord, Env.YCoord #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Env.IntercardinalDir
                   ww :: Env.XCoord
                   ww1 :: Env.YCoord ->
                 (# case w of wild {
                      DEFAULT
                      -> GHC.Integer.Type.plusInteger ww Env.$fDirectionCardinalDir5
                      Env.NW
                      -> GHC.Integer.Type.plusInteger ww Env.$fDirectionCardinalDir3
                      Env.SW
                      -> GHC.Integer.Type.plusInteger ww Env.$fDirectionCardinalDir3 },
                    case w of wild {
                      DEFAULT
                      -> GHC.Integer.Type.plusInteger ww1 Env.$fDirectionCardinalDir5
                      Env.SE
                      -> GHC.Integer.Type.plusInteger ww1 Env.$fDirectionCardinalDir3
                      Env.SW
                      -> GHC.Integer.Type.plusInteger
                           ww1
                           Env.$fDirectionCardinalDir3 } #)) -}
3c1d591bde09ff3e4d22497e25e7d7a6
  $wgo5 ::
    Env.XCoord
    -> Env.YCoord -> Data.Set.Base.Set Env.Position -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0] -}
0598e7da52a2409522044c401fcee77c
  data Altitude = High | Low
    Promotable
798140351eda72b6b26dcc66f57068a2
  data CardinalDir = North | South | East | West
    Promotable
41fa8ab29b11a7ddbed19315d304d366
  data DetailReq = Close | Far
    Promotable
7f051353ac4a5a3b2c4061613d753aaf
  class Direction d where
    deltas :: d -> Env.Hop
481e46b7b776107658344fc34372d1a2
  type Environment = Data.Map.Base.Map Env.Position Env.Patch
7a0a1fde611e5fd2f7295bff454c76e3
  type Footprint = Data.Set.Base.Set Env.Position
465d9a0a84708616732f64bafa92efeb
  type Hop = (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
240d397ebcf372029f1762164c40123b
  data IntercardinalDir = NE | SE | NW | SW
    Promotable
61b8cd8a4369899a76572b192b24aaf9
  data Patch = Patch Env.DetailReq
    Promotable
fda968edc0a3e2bcbd99cecfd362a455
  data Position = Position Env.XCoord Env.YCoord
43949bbc12fc1983325e747d52c4142a
  type XCoord = GHC.Integer.Type.Integer
2a4f8f0446726cb38ad8d57bbeaa6468
  type YCoord = GHC.Integer.Type.Integer
a44fab67f39333658afa7628e193519d
  inBounds :: Env.Footprint -> Env.Position -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, True)
                (\ footprint :: Env.Footprint pos :: Env.Position ->
                 Env.$smember_go5 pos footprint) -}
e4b5bf5e68b53ceb18a75963dd57829c
  neighborTo :: Env.Direction d => d -> Env.Position -> Env.Position
  {- Arity: 3, Strictness: <L,C(U(U,U))><L,U><S,1*U(1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ d w :: Env.Direction d w1 :: d w2 :: Env.Position ->
                 case w2 of ww { Env.Position ww1 ww2 ->
                 Env.Position
                   (case w `cast` (Env.NTCo:Direction[0] <d>_N)
                           w1 of wild { (,) x ds1 ->
                    GHC.Integer.Type.plusInteger ww1 x })
                   (case w `cast` (Env.NTCo:Direction[0] <d>_N)
                           w1 of wild { (,) ds1 y ->
                    GHC.Integer.Type.plusInteger ww2 y }) }) -}
9980b9488d30994dae123540dda3953e
  neighborTo_$sneighborTo ::
    Env.CardinalDir -> Env.Position -> Env.Position
  {- Arity: 2, Strictness: <L,U><S,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Env.CardinalDir w1 :: Env.Position ->
                 case w1 of ww { Env.Position ww1 ww2 ->
                 case Env.$w$sneighborTo w ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 Env.Position ww4 ww5 } }) -}
16472aa3b78e94ad4546bf9c9f5aa4f9
  neighborTo_$sneighborTo1 ::
    Env.IntercardinalDir -> Env.Position -> Env.Position
  {- Arity: 2, Strictness: <L,U><S,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Env.IntercardinalDir w1 :: Env.Position ->
                 case w1 of ww { Env.Position ww1 ww2 ->
                 case Env.$w$sneighborTo1 w ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 Env.Position ww4 ww5 } }) -}
ab37fe44d57ee247e03f570e947966ac
  neighborsOf :: Env.Position -> [Env.Position]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ pos :: Env.Position ->
                 letrec {
                   go :: [Env.Position -> Env.Position] -> [Env.Position]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Env.Position -> Env.Position] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Env.Position
                       : y ys -> GHC.Types.: @ Env.Position (y pos) (go ys) }
                 } in
                 go Env.neighborsOf1) -}
b72cf4dcdbea36aa82d383c452c57cc9
  neighborsOf1 :: [Env.Position -> Env.Position]
  {- Unfolding: (Env.neighborsOf_go Env.neighborsOf2) -}
f36f79284b1f0d36dfa5c63c10cc48ae
  neighborsOf2 :: [Env.CardinalDir]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Env.CardinalDir
                   Env.North
                   Env.neighborsOf3) -}
ff76f22f149d1e69ec0c948f893f66ff
  neighborsOf3 :: [Env.CardinalDir]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Env.CardinalDir
                   Env.South
                   Env.neighborsOf4) -}
29968a12fc86683617cad94abcd77a67
  neighborsOf4 :: [Env.CardinalDir]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Env.CardinalDir
                   Env.East
                   Env.neighborsOf5) -}
355060e745363184698b07e2775b66a2
  neighborsOf5 :: [Env.CardinalDir]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Env.CardinalDir
                   Env.West
                   (GHC.Types.[] @ Env.CardinalDir)) -}
4d745383792383fa2e5cfb03acfb9f2a
  neighborsOf_go ::
    [Env.CardinalDir] -> [Env.Position -> Env.Position]
  {- Arity: 1, Strictness: <S,1*U> -}
instance Env.Direction [Env.CardinalDir]
  = Env.$fDirectionCardinalDir
instance Env.Direction [Env.IntercardinalDir]
  = Env.$fDirectionIntercardinalDir
instance GHC.Classes.Eq [Env.Altitude] = Env.$fEqAltitude
instance GHC.Classes.Eq [Env.CardinalDir] = Env.$fEqCardinalDir
instance GHC.Classes.Eq [Env.IntercardinalDir]
  = Env.$fEqIntercardinalDir
instance GHC.Classes.Eq [Env.Position] = Env.$fEqPosition
instance GHC.Classes.Ord [Env.Position] = Env.$fOrdPosition
instance GHC.Show.Show [Env.Altitude] = Env.$fShowAltitude
instance GHC.Show.Show [Env.CardinalDir] = Env.$fShowCardinalDir
instance GHC.Show.Show [Env.DetailReq] = Env.$fShowDetailReq
instance GHC.Show.Show [Env.IntercardinalDir]
  = Env.$fShowIntercardinalDir
instance GHC.Show.Show [Env.Patch] = Env.$fShowPatch
instance GHC.Show.Show [Env.Position] = Env.$fShowPosition
"SPEC neighborTo @ CardinalDir" [ALWAYS] forall $dDirection :: Env.Direction
                                                                 Env.CardinalDir
  Env.neighborTo @ Env.CardinalDir $dDirection
  = Env.neighborTo_$sneighborTo
"SPEC neighborTo @ IntercardinalDir" [ALWAYS] forall $dDirection :: Env.Direction
                                                                      Env.IntercardinalDir
  Env.neighborTo @ Env.IntercardinalDir $dDirection
  = Env.neighborTo_$sneighborTo1
"SPEC/Env $dmshowsPrec @ Position" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               Env.Position
  GHC.Show.$dmshowsPrec @ Env.Position $dShow
  = Env.$fShowPosition_$s$dmshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

